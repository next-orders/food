generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Channel {
  id             String          @id
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  slug           String
  name           String
  description    String?
  countryCode    String          @map("country_code")
  currencyCode   String          @map("currency_code")
  isActive       Boolean         @default(true) @map("is_active")
  paymentMethods PaymentMethod[]
  warehouses     Warehouse[]
  menus          Menu[]
  products       Product[]
  checkouts      Checkout[]
  users          User[]

  @@map("channel")
}

model PaymentMethod {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  name      String
  type      String
  channelId String   @map("channel_id")
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@map("payment_method")
}

model Media {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("media")
}

model Menu {
  id         String         @id
  createdAt  DateTime       @default(now()) @map("created_at")
  updatedAt  DateTime       @default(now()) @map("updated_at")
  slug       String
  name       String
  isActive   Boolean        @default(false) @map("is_active")
  channelId  String         @map("channel_id")
  channel    Channel        @relation(fields: [channelId], references: [id])
  categories MenuCategory[]

  @@map("menu")
}

model MenuCategory {
  id        String    @id
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @map("updated_at")
  slug      String
  name      String
  menuId    String    @map("menu_id")
  menu      Menu      @relation(fields: [menuId], references: [id])
  products  Product[]

  @@map("menu_category")
}

model Product {
  id                     String           @id
  createdAt              DateTime         @default(now()) @map("created_at")
  updatedAt              DateTime         @default(now()) @map("updated_at")
  slug                   String
  name                   String
  description            String
  isAvailableForPurchase Boolean          @default(true) @map("is_available_for_purchase")
  channelId              String           @map("channel_id")
  channel                Channel          @relation(fields: [channelId], references: [id])
  categoryId             String           @map("category_id")
  category               MenuCategory     @relation(fields: [categoryId], references: [id])
  mediaId                String?          @map("media_id")
  variants               ProductVariant[]

  @@map("product")
}

model ProductVariant {
  id            String         @id
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  name          String
  weightUnit    String         @default("G") @map("weight_unit")
  weightValue   Float          @map("weight_value")
  gross         Float
  net           Float?
  calories      Float?
  carbohydrate  Float?
  fat           Float?
  protein       Float?
  productId     String         @map("product_id")
  product       Product        @relation(fields: [productId], references: [id])
  checkoutLines CheckoutLine[]

  @@map("product_variant")
}

model Checkout {
  id              String         @id
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  deliveryMethod  String         @map("delivery_method")
  paymentMethodId String         @map("payment_method_id")
  shippingPrice   Float          @default(0) @map("shipping_price")
  totalPrice      Float          @default(0) @map("total_price")
  discount        Float?
  warehouseId     String?        @map("warehouse_id")
  addressId       String?        @map("address_id")
  note            String?
  channelId       String         @map("channel_id")
  channel         Channel        @relation(fields: [channelId], references: [id])
  lines           CheckoutLine[]

  @@map("checkout")
}

model CheckoutLine {
  id                     String         @id
  createdAt              DateTime       @default(now()) @map("created_at")
  updatedAt              DateTime       @default(now()) @map("updated_at")
  quantity               Int            @default(1)
  unitPrice              Float          @default(0) @map("unit_price")
  undiscountedUnitPrice  Float          @default(0) @map("undiscounted_unit_price")
  totalPrice             Float          @default(0) @map("total_price")
  undiscountedTotalPrice Float          @default(0) @map("undiscounted_total_price")
  isGift                 Boolean        @default(false) @map("is_gift")
  checkoutId             String         @map("checkout_id")
  checkout               Checkout       @relation(fields: [checkoutId], references: [id])
  productVariantId       String         @map("product_variant_id")
  variant                ProductVariant @relation(fields: [productVariantId], references: [id])

  @@map("checkout_line")
}

model User {
  id          String            @id
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @default(now()) @map("updated_at")
  isActive    Boolean           @default(true) @map("is_active")
  isConfirmed Boolean           @default(false) @map("is_confirmed")
  isStaff     Boolean           @default(false) @map("is_staff")
  name        String?
  email       String?
  channelId   String            @map("channel_id")
  channel     Channel           @relation(fields: [channelId], references: [id])
  permissions UserPermission[]
  credentials UserCredentials[]

  @@map("user")
}

model UserPermission {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  code      String
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("user_permission")
}

model UserCredentials {
  id           String   @id
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  login        String   @unique
  passwordHash String   @map("password_hash")
  userId       String   @map("user_id")
  user         User     @relation(fields: [userId], references: [id])

  @@map("user_credentials")
}

model Warehouse {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  name      String
  address   String
  channelId String   @map("channel_id")
  channel   Channel  @relation(fields: [channelId], references: [id])

  @@map("warehouse")
}

model Address {
  id        String   @id
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  street    String
  flat      String?
  doorphone String?
  entrance  String?
  floor     String?
  note      String?

  @@map("address")
}
